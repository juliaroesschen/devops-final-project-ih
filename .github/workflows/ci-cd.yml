name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v2

      # 2. Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      # 3. Frontend build and test
      - name: Install Frontend Dependencies
        working-directory: ./expensy_frontend
        run: npm install

      - name: Build Frontend
        working-directory: ./expensy_frontend
        run: npm run build

      # (Optional) Add tests if available
      # - name: Test Frontend
      #   working-directory: ./expensy_frontend
      #   run: npm test

      # 4. Backend build and test
      - name: Install Backend Dependencies
        working-directory: ./expensy_backend
        run: npm install

      - name: Build Backend
        working-directory: ./expensy_backend
        run: npm run build

      # (Optional) Add tests if available
      # - name: Test Backend
      #   working-directory: ./expensy_backend
      #   run: npm test

  docker-build-push:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the code again for Docker builds
      - name: Checkout Code
        uses: actions/checkout@v2

      # 2. Set up Docker Buildx (for multi-platform builds, if needed)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # 3. Log in to Docker Hub using credentials from GitHub Secrets
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Build and Push Frontend Image with build-arg
      - name: Build & Push Frontend Image
        run: |
          docker build \
            -t ${{ secrets.DOCKER_USERNAME }}/expensy-frontend:latest \
            ./expensy_frontend \
            -f ./expensy_frontend/Dockerfile.frontend \
            --build-arg NEXT_PUBLIC_API_URL="${{ secrets.NEXT_PUBLIC_API_URL }}"
          docker push ${{ secrets.DOCKER_USERNAME }}/expensy-frontend:latest

      # 5. Build and Push Backend Image
      - name: Build & Push Backend Image
        run: |
          docker build \
            -t ${{ secrets.DOCKER_USERNAME }}/expensy-backend:latest \
            ./expensy_backend \
            -f ./expensy_backend/Dockerfile.backend
          docker push ${{ secrets.DOCKER_USERNAME }}/expensy-backend:latest

  deploy:
    needs: docker-build-push
    runs-on: ubuntu-latest
    environment:
      name: production  # Use GitHub Environments for manual approvals if required.
    steps:
      # 1. Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v2

      # 2. Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-3

      # 3. Verify AWS Credentials are Loaded
      - name: Check AWS Identity
        run: aws sts get-caller-identity

      # 4. Configure kubeconfig from GitHub Secret (assumes your kubeconfig is base64-encoded)
      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config

      # 5. Deploy Kubernetes Manifests
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/configs/
          kubectl apply -f k8s/backend/
          kubectl apply -f k8s/frontend/
          kubectl rollout restart deployment/backend-deployment
          kubectl rollout restart deployment/frontend-deployment
